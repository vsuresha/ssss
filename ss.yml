Polaris MAIN.YML
name: 'Polaris scan'

Trigger the workflow on specific events
on: 
  push:
    branches: 
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

Set environment variables from GitHub Secrets
env:
  POLARIS_ACCESS_TOKEN: ${{ secrets.POLARIS_API_TOKEN }}
  POLARIS_SERVER_URL: ${{ secrets.POLARIS_SERVER_URL }}

Define jobs
jobs:
  polaris-scanning:
    Specify the self-hosted runner
    runs-on: nojika-nprd-k8s-runner

    Define the Docker container to use
    container:
      image: docker-rt-symphony-platform.pruregistry.intranet.asia:8443/devopsgtpt/flutterflow:3.19.1
      credentials:
        username: ${{ secrets.USERNAME_PRUREGISTRY }}
        password: ${{ secrets.PASSWORD_PRUREGISTRY }}
    
    Set job permissions
    permissions:
      contents: read

    Define the steps to execute
    steps:
      Step 1: Checkout the repository code
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        with:
          path: domain
      
      Step 2: Trigger Polaris Scan
      - name: Trigger Polaris Scan
        uses: pru-gisp/sast/actions/polaris-scan@feature/test
        with:
          POLARIS_PROJECT_NAME: "pru-gtpt-pruservices-domain-svc"
          GIT_BRANCH_NAME: ${{ github.ref_name }}  Optional: Use the current branch name
          POLARIS_ACCESS_TOKEN: ${{ secrets.POLARIS_API_TOKEN }}
          POLARIS_SERVER_URL: ${{ secrets.POLARIS_SERVER_URL }}
          USERNAME_PRUREGISTRY: ${{ secrets.USERNAME_PRUREGISTRY }}
          PASSWORD_PRUREGISTRY: ${{ secrets.PASSWORD_PRUREGISTRY }}
Explanation:
•	name: The name of the workflow, "Polaris scan", which is displayed in the GitHub Actions interface.
•	on: Specifies the events that trigger the workflow. This workflow runs on pushes and pull requests to the main branch, and it can also be triggered manually using workflow_dispatch.
•	env: Defines environment variables that will be used throughout the job. These are fetched securely from GitHub Secrets, ensuring that sensitive data like tokens and URLs are protected.
•	jobs: Contains the actual job definition, named polaris-scanning.
o	runs-on: Specifies the runner on which the job will execute. Here, it's set to nojika-nprd-k8s-runner, indicating a self-hosted runner.
o	container: Defines the Docker container in which the job will run. The image specifies the Docker image to use, and credentials provides the necessary authentication to pull the image from a private registry.
o	permissions: Grants the job read access to the repository contents, which is required for the actions to function properly.
o	steps:  Defines the sequence of actions to be performed in this job.
	actions/checkout@v4: The first step checks out the repository code into a specific path (domain).
	pru-gisp/sast/actions/polaris-scan@feature/test: The second step triggers the Polaris scan using a custom action. It passes in necessary parameters like the project name, Git branch, and credentials required to perform the scan.

POLARIS ACTION.YML
name: Code Scanning with Polaris
description: Scan the codebase with Polaris

Define the inputs required by this action
inputs:
  POLARIS_PROJECT_NAME:
    description: 'Polaris Project Name'
    required: true
  GIT_BRANCH_NAME:
    description: 'Git Branch Name'
    required: true
  POLARIS_ACCESS_TOKEN:
    description: 'Polaris Access Token'
    required: true
  POLARIS_SERVER_URL:
    description: 'Polaris Server URL'
    default: 'https://prudential.polaris.synopsys.com'

Define the steps that will be executed when this action is run
runs:
  using: 'composite'
  steps:
    - name: Download Polaris CLI
      run: |
          curl -u "${{ inputs.USERNAME_PRUREGISTRY }}":"${{ inputs.PASSWORD_PRUREGISTRY }}" https://artifactory-new.pru.intranet.asia:8443/artifactory/generic-rits-devsecops-sast-local/Polaris/CLI/polaris.zip -o polaris.zip
          ls -la
          unzip -d $HOME/bin "polaris.zip"
          chmod +x $HOME/bin/polaris
      shell: bash
    
    - name: Set GITHUB Path
      run: echo "$HOME/bin" >> $GITHUB_PATH
      shell: bash
    
    - name: 'Polaris Code Scan'
      run: |
        echo project="${{ inputs.POLARIS_PROJECT_NAME }}" branch="${{ inputs.GIT_BRANCH_NAME }}"

        polaris --co project.name="${{ inputs.POLARIS_PROJECT_NAME }}" --co project.branch="${{ inputs.GIT_BRANCH_NAME }}" analyze -w
      env:
        POLARIS_ACCESS_TOKEN: ${{ inputs.POLARIS_ACCESS_TOKEN }}
        POLARIS_SERVER_URL: ${{ inputs.POLARIS_SERVER_URL }}
      shell: bash
Explanation:
•	name: The name of the GitHub Action, "Code Scanning with Polaris," which identifies the action within workflows.
•	description: A brief explanation of what the action does, in this case, scanning the codebase with Polaris.
inputs:
•	inputs: Defines the parameters that must be provided when the action is invoked.
o	POLARIS_PROJECT_NAME: The name of the project in Polaris. This is required for the scan.
o	GIT_BRANCH_NAME: The name of the Git branch being scanned. Also required.
o	POLARIS_ACCESS_TOKEN: The access token used to authenticate with Polaris. This is required to run the scan.
o	POLARIS_SERVER_URL: The URL of the Polaris server. It has a default value of 'https://prudential.polaris.synopsys.com', but can be overridden if needed.
runs:
•	runs: Specifies that this is a "composite" action, meaning it will run a sequence of steps defined within the action itself.
o	steps: This section lists the individual steps to be executed.
	Download Polaris CLI: This step downloads the Polaris CLI from a specified internal Artifactory repository using curl. The credentials are passed via ${{ inputs.USERNAME_PRUREGISTRY }} and ${{ inputs.PASSWORD_PRUREGISTRY }}, which would typically be provided as inputs or secrets. The CLI is then unzipped into the $HOME/bin directory, and its permissions are set to make it executable.
	Set gitHub Path: Adds $HOME/bin to the GitHub Actions PATH using $GITHUB_PATH, making the Polaris CLI available for use in subsequent steps. This is crucial so that the CLI can be called directly in the next steps.
	Polaris Code Scan: Executes the Polaris scan on the codebase.
	run: This block runs the actual scan command. It uses the polaris CLI with the project name and branch name provided as inputs. The -w option typically indicates that the command should wait for the scan results.
	env: The necessary environment variables are set here, passing the Polaris access token and server URL, allowing the CLI to authenticate and communicate with the Polaris server.

Sample Template:

name: CI/CD Pipeline

Define the events that will trigger this workflow
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

Define the jobs to run
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      Set up a specific version of Node.js (or any other environment needed)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      Install dependencies
      - name: Install dependencies
         run: npm install

      Run the build script
      - name: Build the project
        run: npm run build

      Run tests
      - name: Run tests
         run: npm test

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      Deploy the project
      - name: Deploy to production
        run: ./deploy.sh

Explanation:
•	name: This specifies the name of the workflow. Here, it's called "CI/CD Pipeline," but you can name it anything that reflects the workflow's purpose.
•	on: This section defines the events that trigger the workflow. In this template, the workflow is triggered on push to the main branch and pull_request to the main branch. You can customize the events and branches as needed.
•	jobs: This is where the different jobs that make up the workflow are defined. In this template, there are two jobs: build and deploy.
o	runs-on: Specifies the type of machine that the job should run on. ubuntu-latest is commonly used, but other runners like windows-latest or macos-latest can be specified.
o	steps: Each job consists of multiple steps. Steps are executed sequentially, and each step represents a specific task in the CI/CD pipeline.
	actions/checkout@v4: This action checks out the code from the repository so that it can be used in subsequent steps.
	actions/setup-node@v4: Sets up a specific version of Node.js (in this case, version 16). You can replace this with another action to set up a different environment.
	run: Directly runs shell commands. In this template, npm install, npm run build, and npm test are used to install dependencies, build the project, and run tests, respectively.
o	needs: In the deploy job, this indicates that the deploy job should only run if the build job has completed successfully.
o	if: This condition specifies that the deploy job should only run if the workflow is triggered on the main branch.
